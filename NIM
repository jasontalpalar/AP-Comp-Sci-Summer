/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nim;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionListener;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.Timer;

/**
 *
 * @author Jason
 */
public class NIM extends JPanel implements  ActionListener, MouseMotionListener, KeyListener {
    Timer time = new Timer(5, this);
    int  mousex, mousey;
    static ArrayList rock1;
    static ArrayList rock2;
    static ArrayList rock3;
    int rockx = 100;
    int rocky = 420;
    int rockx1 = 100;
    int rocky1 = 420;
    int rockx2 = 100;
    int rocky2 = 420;
    int rockx3 = 100;
    int rocky3 = 420;
    int counter1 = 0;
    int counter2 = 0;
    int counter3 = 0;
    int counter = 3;
    int c1 = 3;
    int c2 = 5;
    int c3 = 8;
    int finalcounter = 0;
    static ArrayList fake;
    boolean rect;
    
    public NIM() {
        rock1 = new ArrayList();
        rock2 = new ArrayList();
        rock3 = new ArrayList();
        fake = new ArrayList();
        time.start(); 
        this.addKeyListener(this);
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);
        addMouseMotionListener(this);
    }
    
    public static void main(String[] args) {
        JFrame f = new JFrame("NIM");
        NIM g = new NIM();
        f.add(g);
        f.setSize(800,1000);
        f.setVisible(true);
        f.setResizable(true);
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }
    
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.setColor(Color.cyan);
        g.fillRect(0,0,800,1000);
        
        g.setColor(Color.gray);
          
        for(int i = 0; i < rock1.size(); i++) {
            Rock r = (Rock) rock1.get(i);
            g.fillOval(r.getX(), r.getY(),r.getW(),r.getH());
        }
        for(int i = 0; i < rock2.size(); i++) {
            Rock r = (Rock) rock2.get(i);
            g.fillOval(r.getX(), r.getY(),r.getW(),r.getH());
        }
        for(int i = 0; i < rock3.size(); i++) {
            Rock r = (Rock) rock3.get(i);
            g.fillOval(r.getX(), r.getY(),r.getW(),r.getH());
        }
          for(int i = 0; i < fake.size(); i++) {
            Rock r = (Rock) fake.get(i);
            //g.fillOval(r.getX(), r.getY(),r.getW(),r.getH());
        }
        rocky1 += 80;
        rocky2 += 80;
        rocky3 += 80;
        if(rock1.size() < 3) {
            Rock r = new Rock(rockx1,rocky1,80,80);
            rock1.add(r);
        }
        if(rock2.size() < 5) {
            Rock r = new Rock(rockx2+275,rocky2-160,80,80);
            rock2.add(r);
        }
        if(rock3.size() < 8) {
            Rock r = new Rock(rockx3+550,rocky3-400,80,80);
            rock3.add(r);
        }
        
        if(rect) {
            Rock r = new Rock(mousex,mousey,10,10);
            fake.add(r);
        }
        //g.fillRect(fake.x, fake.y, fake.width, fake.height);
        
        for(int i = 0; i < rock1.size(); i++) {
            for(int p = 0; p < fake.size(); p++) {
                Rock v = (Rock) rock1.get(i);
                Rectangle r = v.getBounds();
                Rock t = (Rock) fake.get(p);
                Rectangle y = t.getBounds();
                if(y.intersects(r)) { 
                    rock1.remove(i);
                    fake.remove(p);
                    c1--;
                    counter1++;
                    if(counter1 == 3) {
                        if(counter % 2 == 0) {
                            System.out.println("Player 1 wins!");
                        }
                        if(counter % 2 != 0) {
                            System.out.println("Player 2 wins!");
                        }
                        System.exit(0);
                    }
                }
            }
        }
        for(int i = 0; i < rock2.size(); i++) {
            for(int p = 0; p < fake.size(); p++) {
                Rock v = (Rock) rock2.get(i);
                Rectangle r = v.getBounds();
                Rock t = (Rock) fake.get(p);
                Rectangle y = t.getBounds();
                if(y.intersects(r)) { 
                    rock2.remove(i);
                    fake.remove(p);
                    c2--;
                    counter2++;
                    if(counter2 == 5) {
                        if(counter % 2 == 0) {
                            System.out.println("Player 1 wins!");
                        }
                        if(counter % 2 != 0) {
                            System.out.println("Player 2 wins!");
                        }
                        System.exit(0);
                    }
                }
            } 
        }
        for(int i = 0; i < rock3.size(); i++) {
            for(int p = 0; p < fake.size();p++) {
                Rock v = (Rock) rock3.get(i);
                Rectangle r = v.getBounds();
                Rock t = (Rock) fake.get(p);
                Rectangle y = t.getBounds();
                if(y.intersects(r)) { 
                    rock3.remove(i);
                    fake.remove(p);
                    c3--;
                    counter3++;
                    if(counter3 == 8) {
                        if(counter % 2 == 0) {
                            System.out.println("Player 1 wins!");
                        }
                        if(counter % 2 != 0) {
                            System.out.println("Player 2 wins!");
                        }
                        System.exit(0);
                    }
                }
            }
        }
        //finalcounter = counter1 + counter2 + counter3;
    }
    
    @Override
    public void actionPerformed(ActionEvent e) {
        repaint();
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        mousex = (int)e.getX();
        mousey = (int)e.getY();
        rect = true;
        e.consume();
    }

    @Override
    public void mouseMoved(MouseEvent e) {
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
        int k = e.getKeyCode();
        if(k == KeyEvent.VK_ENTER) {
            counter++;
        }
    }

    @Override
    public void keyReleased(KeyEvent e) {
        int k = e.getKeyCode();
        if(k != KeyEvent.VK_ENTER) {
            counter = counter;
        }
    }
    
}

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nim;

import java.awt.Rectangle;
import java.awt.geom.Ellipse2D;

/**
 *
 * @author Jason
 */
public class Rock {
int x,y,w,h;
Ellipse2D.Double o;
   
    public Rock(int initialX, int initialY, int initialW, int initialH) {
        x = initialX;
        y = initialY;
        w = initialW;
        h = initialH;
        o = new Ellipse2D.Double(x,y,w,h);
    }
    
    public Rectangle getBounds() {
        return new Rectangle(x,y,w,h);
    }
    public int getX() {
        return x;
    }
    public int getY() {
        return y;
    }
    public int getW() {
        return w;
    }
    public int getH() {
        return h;
    }

}
