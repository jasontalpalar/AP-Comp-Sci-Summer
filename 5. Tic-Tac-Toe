/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tic.tac.toe;

import java.util.Random;
import java.util.Scanner;

/**
 *
 * @author Jason
 */
public class TicTacToe { 

    public enum Situations {
        IN_PROGRESS,
        TIE_GAME,
        COMPUTER_WINS,
        PLAYER_WINS,
    }
    
    public char board[][] = new char[3][3];
    public Scanner sc;
    public Random random;
    
    public TicTacToe() {
        sc = new Scanner(System.in);
        random = new Random();
        initBoard();
        Rules();
    }
    
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Tic-Tac-Toe:");
        TicTacToe tictactoe = new TicTacToe();
        boolean nextTurn = false;
        while (tictactoe.status() == Situations.IN_PROGRESS) {
            if (nextTurn)
                tictactoe.player();
            else
                tictactoe.computer();
            tictactoe.printBoard();
            nextTurn = !nextTurn;
        } 
        Situations status = tictactoe.status();
        if (status == Situations.TIE_GAME)
            System.out.println("The game is a tie!");
        else if (status == Situations.COMPUTER_WINS)
            System.out.println("Computer wins!");
        else if (status == Situations.PLAYER_WINS)
            System.out.println("You win!");
        System.out.println("Would you like to play again? (Yes/yes or No/no)");
        String playagain = sc.next();
        if(playagain.equals("Yes") || playagain.equals("yes")) {
            main(args);
        }
        if(playagain.equals("No") || playagain.equals("no")) {
            System.exit(0);
        }
    }
    
    private void Rules() {
        System.out.println("It is the user (O) versus the computer (X). Type 0, 1, or 2\nto choose a row, and then do the same to choose a column.\nThe first one to place three in a row (vertically, horizontally,\nor diagonally) wins.");
    }
    
    private void initBoard() {
        for (int row = 0; row <= 2; ++row) {
            for (int col = 0; col <= 2; ++col) {
                board[row][col] = '-';
            }
        }
    }

    private void printBoard() {
        System.out.println("------------------------------");
        for (int row = 0; row <= 2; ++row) {
            for (int col = 0; col <= 2; ++col) {
                System.out.print("  " + board[row][col]);
            }
            System.out.println();
            System.out.println("  --+--+--");
        }
        System.out.println();
    }
    
    private void markSquare(int row, int col, char c) {
        board[row][col] = c;
    }

    private void computer() {
        while (true) {
            int row = (int) random.nextInt(3);
            int col = (int) random.nextInt(3);
            if (board[row][col] == '-') {
                markSquare(row, col, 'X');
                break;
            }
        }
    }

    private void player() {

        while (true) {
            System.out.print("Row: ");
            int row = sc.nextInt();
            System.out.print("Column: ");
            int col = sc.nextInt();
            if ((row < 0) || (row > 2))
                System.out.println("Not a valid input, please enter another row!");
            else if ((col < 0) || (col > 2))
                System.out.println("Not a valid input, please enter another column!");
            else if (board[row][col] != '-')
                System.out.println("That spot is already taken, please make another move!");
            else {
                markSquare(row, col, 'O');
                break;
            }
        }
    }

    private Situations status() {
        boolean tieGame = true;
        for (int row = 0; row <= 2; ++row)
            for (int col = 0; col <= 2; ++col)
                    if (board[row][col] == '-')
                        tieGame = false;
        if (tieGame)
            return Situations.TIE_GAME;
        else if (runOfThree('O'))
            return Situations.PLAYER_WINS;
        else if (runOfThree('X'))
            return Situations.COMPUTER_WINS;
        return Situations.IN_PROGRESS;
    }

    private boolean runOfThree(char c) {
        for (int row = 0; row <= 2; ++row) {
            if ((board[row][0] == c) &&
                (board[row][1] == c) &&
                (board[row][2] == c))
                return true;
        }
        for (int col = 0; col <= 2; ++col) {
            if ((board[0][col] == c) &&
                (board[1][col] == c) &&
                (board[2][col] == c))
                return true;
        }
        if ((board[0][0] == c) && 
            (board[1][1] == c) &&
            (board[2][2] == c))
            return true;
        if ((board[2][0] == c) && 
            (board[1][1] == c) &&
            (board[0][2] == c))
            return true;
        return false;
    }
}
